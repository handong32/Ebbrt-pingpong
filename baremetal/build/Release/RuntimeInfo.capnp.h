// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: RuntimeInfo.capnp

#ifndef CAPNP_INCLUDED_dde6597835216252_
#define CAPNP_INCLUDED_dde6597835216252_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct RuntimeInfo {
  RuntimeInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_dcdb2cc2dcd3e0b8;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::RuntimeInfo, dcdb2cc2dcd3e0b8,
    1, 0, EIGHT_BYTES);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class RuntimeInfo::Reader {
public:
  typedef RuntimeInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint16_t getEbbIdSpace() const;

  inline  ::uint16_t getMessengerPort() const;

  inline  ::uint32_t getGlobalIdMapAddress() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(RuntimeInfo::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(RuntimeInfo::Reader reader) {
  return ::capnp::_::structString<RuntimeInfo>(reader._reader);
}

class RuntimeInfo::Builder {
public:
  typedef RuntimeInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint16_t getEbbIdSpace();
  inline void setEbbIdSpace( ::uint16_t value);

  inline  ::uint16_t getMessengerPort();
  inline void setMessengerPort( ::uint16_t value);

  inline  ::uint32_t getGlobalIdMapAddress();
  inline void setGlobalIdMapAddress( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(RuntimeInfo::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(RuntimeInfo::Builder builder) {
  return ::capnp::_::structString<RuntimeInfo>(builder._builder.asReader());
}

class RuntimeInfo::Pipeline {
public:
  typedef RuntimeInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline  ::uint16_t RuntimeInfo::Reader::getEbbIdSpace() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t RuntimeInfo::Builder::getEbbIdSpace() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RuntimeInfo::Builder::setEbbIdSpace( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RuntimeInfo::Reader::getMessengerPort() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t RuntimeInfo::Builder::getMessengerPort() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void RuntimeInfo::Builder::setMessengerPort( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RuntimeInfo::Reader::getGlobalIdMapAddress() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t RuntimeInfo::Builder::getGlobalIdMapAddress() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void RuntimeInfo::Builder::setGlobalIdMapAddress( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_dde6597835216252_
